/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
/**
 * 
 * @export
 * @interface Refund
 */
export interface Refund {
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    paymentRequestId?: string;
    /**
     * 
     * @type {number}
     * @memberof Refund
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    channelCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    referenceId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    failureCode?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Refund
     */
    refundFeeAmount?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    updated?: string;
    /**
     * 
     * @type {object}
     * @memberof Refund
     */
    metadata?: object | null;
}

/**
 * Check if a given object implements the Refund interface.
 */
export function instanceOfRefund(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RefundFromJSON(json: any): Refund {
    return RefundFromJSONTyped(json, false);
}

export function RefundFromJSONTyped(json: any, ignoreDiscriminator: boolean): Refund {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'paymentRequestId': !exists(json, 'payment_request_id') ? undefined : json['payment_request_id'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'channelCode': !exists(json, 'channel_code') ? undefined : json['channel_code'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'referenceId': !exists(json, 'reference_id') ? undefined : json['reference_id'],
        'failureCode': !exists(json, 'failure_code') ? undefined : json['failure_code'],
        'refundFeeAmount': !exists(json, 'refund_fee_amount') ? undefined : json['refund_fee_amount'],
        'created': !exists(json, 'created') ? undefined : json['created'],
        'updated': !exists(json, 'updated') ? undefined : json['updated'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function RefundToJSON(value?: Refund | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'payment_request_id': value.paymentRequestId,
        'amount': value.amount,
        'channel_code': value.channelCode,
        'country': value.country,
        'currency': value.currency,
        'reference_id': value.referenceId,
        'failure_code': value.failureCode,
        'refund_fee_amount': value.refundFeeAmount,
        'created': value.created,
        'updated': value.updated,
        'metadata': value.metadata,
    };
}

