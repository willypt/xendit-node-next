/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */


import * as runtime from '../../runtime';
import type {
  Customer,
} from '../models';
import {
    CustomerFromJSON,
    CustomerToJSON,
} from '../models';

export interface GetCustomerRequest {
    id: string;
    forUserId?: string;
    xIdempotencyKey?: string;
    idempotencyKey?: string;
}

/**
 * 
 */
export class CustomerApi extends runtime.BaseAPI {

    secretKey: string;
    xenditURL: string;

    constructor({secretKey, xenditURL}: {secretKey: string, xenditURL?: string}) {
        super()
        this.secretKey = secretKey;
        this.xenditURL = xenditURL || 'https://api.xendit.co';
    }

    /**
     * Retrieves a single customer object
     * Get Customer
     */
    private async getCustomerRaw(requestParameters: GetCustomerRequest): Promise<runtime.ApiResponse<Customer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }

        if (requestParameters.xIdempotencyKey !== undefined && requestParameters.xIdempotencyKey !== null) {
            headerParameters['x-idempotency-key'] = String(requestParameters.xIdempotencyKey);
        }

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerFromJSON(jsonValue));
    }

    /**
     * Retrieves a single customer object
     * Get Customer
     */
    async getCustomer(requestParameters: GetCustomerRequest): Promise<Customer> {
        const response = await this.getCustomerRaw(requestParameters);
        return await response.value();
    }

}
