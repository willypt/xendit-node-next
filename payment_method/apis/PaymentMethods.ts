/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */


import * as runtime from '../../runtime';
import type {
  CreatePaymentMethod409Response,
  CreatePaymentMethod503Response,
  GetAllPaymentMethods400Response,
  GetAllPaymentMethods403Response,
  GetAllPaymentMethods404Response,
  GetAllPaymentMethodsDefaultResponse,
  PaymentMethodReusability,
  PaymentMethodStatus,
  PaymentMethodType,
  PublicAuthPaymentMethod,
  PublicExpirePaymentMethod,
  PublicPatchPaymentMethod,
  PublicPaymentChannelList,
  PublicPaymentMethod,
  PublicPaymentMethodList,
  PublicPostSimulatePaymentChannelHealth,
  PublicSDKCreatePaymentMethod,
  PublicSimulatePayment,
  PublicSimulatePaymentChannelHealth,
  SimulatePaymentRequest,
} from '../models';
import {
    CreatePaymentMethod409ResponseFromJSON,
    CreatePaymentMethod409ResponseToJSON,
    CreatePaymentMethod503ResponseFromJSON,
    CreatePaymentMethod503ResponseToJSON,
    GetAllPaymentMethods400ResponseFromJSON,
    GetAllPaymentMethods400ResponseToJSON,
    GetAllPaymentMethods403ResponseFromJSON,
    GetAllPaymentMethods403ResponseToJSON,
    GetAllPaymentMethods404ResponseFromJSON,
    GetAllPaymentMethods404ResponseToJSON,
    GetAllPaymentMethodsDefaultResponseFromJSON,
    GetAllPaymentMethodsDefaultResponseToJSON,
    PaymentMethodReusabilityFromJSON,
    PaymentMethodReusabilityToJSON,
    PaymentMethodStatusFromJSON,
    PaymentMethodStatusToJSON,
    PaymentMethodTypeFromJSON,
    PaymentMethodTypeToJSON,
    PublicAuthPaymentMethodFromJSON,
    PublicAuthPaymentMethodToJSON,
    PublicExpirePaymentMethodFromJSON,
    PublicExpirePaymentMethodToJSON,
    PublicPatchPaymentMethodFromJSON,
    PublicPatchPaymentMethodToJSON,
    PublicPaymentChannelListFromJSON,
    PublicPaymentChannelListToJSON,
    PublicPaymentMethodFromJSON,
    PublicPaymentMethodToJSON,
    PublicPaymentMethodListFromJSON,
    PublicPaymentMethodListToJSON,
    PublicPostSimulatePaymentChannelHealthFromJSON,
    PublicPostSimulatePaymentChannelHealthToJSON,
    PublicSDKCreatePaymentMethodFromJSON,
    PublicSDKCreatePaymentMethodToJSON,
    PublicSimulatePaymentFromJSON,
    PublicSimulatePaymentToJSON,
    PublicSimulatePaymentChannelHealthFromJSON,
    PublicSimulatePaymentChannelHealthToJSON,
    SimulatePaymentRequestFromJSON,
    SimulatePaymentRequestToJSON,
} from '../models';

export interface AuthPaymentMethodRequest {
    paymentMethodId: string;
    idempotencyKey?: string;
    publicAuthPaymentMethod?: PublicAuthPaymentMethod;
}

export interface CreatePaymentMethodRequest {
    publicSDKCreatePaymentMethod?: PublicSDKCreatePaymentMethod;
}

export interface ExpirePaymentMethodRequest {
    paymentMethodId: string;
    idempotencyKey?: string;
    publicExpirePaymentMethod?: PublicExpirePaymentMethod | null;
}

export interface GetAllPaymentChannelsRequest {
    isActivated?: GetAllPaymentChannelsIsActivatedEnum;
    type?: string;
    idempotencyKey?: string;
}

export interface GetAllPaymentMethodsRequest {
    id?: Array<string>;
    type?: Array<string>;
    status?: Array<PaymentMethodStatus>;
    reusability?: PaymentMethodReusability;
    customerId?: string;
    referenceId?: string;
    afterId?: string;
    beforeId?: string;
    limit?: number;
    idempotencyKey?: string;
}

export interface GetPaymentMethodByIDRequest {
    paymentMethodId: string;
    idempotencyKey?: string;
}

export interface GetPaymentsByPaymentMethodIdRequest {
    paymentMethodId: string;
    businessId?: string;
    paymentRequestId?: Array<string>;
    paymentMethodId2?: Array<string>;
    referenceId?: Array<string>;
    paymentMethodType?: Array<PaymentMethodType>;
    channelCode?: Array<string>;
    status?: Array<string>;
    currency?: Array<string>;
    createdGte?: Date;
    createdLte?: Date;
    updatedGte?: Date;
    updatedLte?: Date;
    limit?: number;
    afterId?: string;
    beforeId?: string;
    idempotencyKey?: string;
}

export interface PatchPaymentMethodRequest {
    paymentMethodId: string;
    idempotencyKey?: string;
    publicPatchPaymentMethod?: PublicPatchPaymentMethod;
}

export interface SimulatePaymentOperationRequest {
    paymentMethodId: string;
    idempotencyKey?: string;
    simulatePaymentRequest?: SimulatePaymentRequest;
}

export interface SimulatePaymentChannelHealthRequest {
    publicPostSimulatePaymentChannelHealth: PublicPostSimulatePaymentChannelHealth;
}

/**
 * 
 */
export class PaymentMethodsApi extends runtime.BaseAPI {

    secretKey: string;
    xenditURL: string;

    constructor({secretKey, xenditURL}: {secretKey: string, xenditURL?: string}) {
        const conf = new runtime.Configuration({
            basePath: xenditURL || 'https://api.xendit.co'
        })
        super(conf)
        this.secretKey = secretKey;
    }

    /**
     * This endpoint validates a payment method linking OTP
     * Validate a payment method\'s linking OTP
     */
    private async authPaymentMethodRaw(requestParameters: AuthPaymentMethodRequest): Promise<runtime.ApiResponse<PublicPaymentMethod>> {
        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId','Required parameter requestParameters.paymentMethodId was null or undefined when calling authPaymentMethod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/v2/payment_methods/{paymentMethodId}/auth`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicAuthPaymentMethodToJSON(requestParameters.publicAuthPaymentMethod),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentMethodFromJSON(jsonValue));
    }

    /**
     * This endpoint validates a payment method linking OTP
     * Validate a payment method\'s linking OTP
     */
    async authPaymentMethod(requestParameters: AuthPaymentMethodRequest): Promise<PublicPaymentMethod> {
        const response = await this.authPaymentMethodRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint initiates creation of payment method
     * Creates payment method
     */
    private async createPaymentMethodRaw(requestParameters: CreatePaymentMethodRequest): Promise<runtime.ApiResponse<PublicPaymentMethod>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/payment_methods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicSDKCreatePaymentMethodToJSON(requestParameters.publicSDKCreatePaymentMethod),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentMethodFromJSON(jsonValue));
    }

    /**
     * This endpoint initiates creation of payment method
     * Creates payment method
     */
    async createPaymentMethod(requestParameters: CreatePaymentMethodRequest = {}): Promise<PublicPaymentMethod> {
        const response = await this.createPaymentMethodRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint expires a payment method and performs unlinking if necessary
     * Expires a payment method
     */
    private async expirePaymentMethodRaw(requestParameters: ExpirePaymentMethodRequest): Promise<runtime.ApiResponse<PublicPaymentMethod>> {
        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId','Required parameter requestParameters.paymentMethodId was null or undefined when calling expirePaymentMethod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/v2/payment_methods/{paymentMethodId}/expire`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicExpirePaymentMethodToJSON(requestParameters.publicExpirePaymentMethod),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentMethodFromJSON(jsonValue));
    }

    /**
     * This endpoint expires a payment method and performs unlinking if necessary
     * Expires a payment method
     */
    async expirePaymentMethod(requestParameters: ExpirePaymentMethodRequest): Promise<PublicPaymentMethod> {
        const response = await this.expirePaymentMethodRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all payment channels
     * Get all payment channels
     */
    private async getAllPaymentChannelsRaw(requestParameters: GetAllPaymentChannelsRequest): Promise<runtime.ApiResponse<PublicPaymentChannelList>> {
        const queryParameters: any = {};

        if (requestParameters.isActivated !== undefined) {
            queryParameters['is_activated'] = requestParameters.isActivated;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/v2/payment_methods/channels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentChannelListFromJSON(jsonValue));
    }

    /**
     * Get all payment channels
     * Get all payment channels
     */
    async getAllPaymentChannels(requestParameters: GetAllPaymentChannelsRequest = {}): Promise<PublicPaymentChannelList> {
        const response = await this.getAllPaymentChannelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all payment methods by filters
     * Get all payment methods by filters
     */
    private async getAllPaymentMethodsRaw(requestParameters: GetAllPaymentMethodsRequest): Promise<runtime.ApiResponse<PublicPaymentMethodList>> {
        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.reusability !== undefined) {
            queryParameters['reusability'] = requestParameters.reusability;
        }

        if (requestParameters.customerId !== undefined) {
            queryParameters['customer_id'] = requestParameters.customerId;
        }

        if (requestParameters.referenceId !== undefined) {
            queryParameters['reference_id'] = requestParameters.referenceId;
        }

        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }

        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/v2/payment_methods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentMethodListFromJSON(jsonValue));
    }

    /**
     * Get all payment methods by filters
     * Get all payment methods by filters
     */
    async getAllPaymentMethods(requestParameters: GetAllPaymentMethodsRequest = {}): Promise<PublicPaymentMethodList> {
        const response = await this.getAllPaymentMethodsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get payment method by ID
     * Get payment method by ID
     */
    private async getPaymentMethodByIDRaw(requestParameters: GetPaymentMethodByIDRequest): Promise<runtime.ApiResponse<PublicPaymentMethod>> {
        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId','Required parameter requestParameters.paymentMethodId was null or undefined when calling getPaymentMethodByID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/v2/payment_methods/{paymentMethodId}`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentMethodFromJSON(jsonValue));
    }

    /**
     * Get payment method by ID
     * Get payment method by ID
     */
    async getPaymentMethodByID(requestParameters: GetPaymentMethodByIDRequest): Promise<PublicPaymentMethod> {
        const response = await this.getPaymentMethodByIDRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns payments with matching PaymentMethodID.
     * Returns payments with matching PaymentMethodID.
     */
    private async getPaymentsByPaymentMethodIdRaw(requestParameters: GetPaymentsByPaymentMethodIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId','Required parameter requestParameters.paymentMethodId was null or undefined when calling getPaymentsByPaymentMethodId.');
        }

        const queryParameters: any = {};

        if (requestParameters.paymentRequestId) {
            queryParameters['payment_request_id'] = requestParameters.paymentRequestId;
        }

        if (requestParameters.paymentMethodId2) {
            queryParameters['payment_method_id'] = requestParameters.paymentMethodId2;
        }

        if (requestParameters.referenceId) {
            queryParameters['reference_id'] = requestParameters.referenceId;
        }

        if (requestParameters.paymentMethodType) {
            queryParameters['payment_method_type'] = requestParameters.paymentMethodType;
        }

        if (requestParameters.channelCode) {
            queryParameters['channel_code'] = requestParameters.channelCode;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.currency) {
            queryParameters['currency'] = requestParameters.currency;
        }

        if (requestParameters.createdGte !== undefined) {
            queryParameters['created[gte]'] = (requestParameters.createdGte as any).toISOString();
        }

        if (requestParameters.createdLte !== undefined) {
            queryParameters['created[lte]'] = (requestParameters.createdLte as any).toISOString();
        }

        if (requestParameters.updatedGte !== undefined) {
            queryParameters['updated[gte]'] = (requestParameters.updatedGte as any).toISOString();
        }

        if (requestParameters.updatedLte !== undefined) {
            queryParameters['updated[lte]'] = (requestParameters.updatedLte as any).toISOString();
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }

        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.businessId !== undefined && requestParameters.businessId !== null) {
            headerParameters['business-id'] = String(requestParameters.businessId);
        }

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/v2/payment_methods/{paymentMethodId}/payments`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns payments with matching PaymentMethodID.
     * Returns payments with matching PaymentMethodID.
     */
    async getPaymentsByPaymentMethodId(requestParameters: GetPaymentsByPaymentMethodIdRequest): Promise<object> {
        const response = await this.getPaymentsByPaymentMethodIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint is used to toggle the ```status``` of an e-Wallet or a Direct Debit payment method to ```ACTIVE``` or ```INACTIVE```.  This is also used to update the details of an Over-the-Counter or a Virtual Account payment method.
     * Patch payment methods
     */
    private async patchPaymentMethodRaw(requestParameters: PatchPaymentMethodRequest): Promise<runtime.ApiResponse<PublicPaymentMethod>> {
        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId','Required parameter requestParameters.paymentMethodId was null or undefined when calling patchPaymentMethod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/v2/payment_methods/{paymentMethodId}`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PublicPatchPaymentMethodToJSON(requestParameters.publicPatchPaymentMethod),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentMethodFromJSON(jsonValue));
    }

    /**
     * This endpoint is used to toggle the ```status``` of an e-Wallet or a Direct Debit payment method to ```ACTIVE``` or ```INACTIVE```.  This is also used to update the details of an Over-the-Counter or a Virtual Account payment method.
     * Patch payment methods
     */
    async patchPaymentMethod(requestParameters: PatchPaymentMethodRequest): Promise<PublicPaymentMethod> {
        const response = await this.patchPaymentMethodRaw(requestParameters);
        return await response.value();
    }

    /**
     * Makes payment with matching PaymentMethodID.
     * Makes payment with matching PaymentMethodID.
     */
    private async simulatePaymentRaw(requestParameters: SimulatePaymentOperationRequest): Promise<runtime.ApiResponse<PublicSimulatePayment>> {
        if (requestParameters.paymentMethodId === null || requestParameters.paymentMethodId === undefined) {
            throw new runtime.RequiredError('paymentMethodId','Required parameter requestParameters.paymentMethodId was null or undefined when calling simulatePayment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/v2/payment_methods/{paymentMethodId}/payments/simulate`.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters.paymentMethodId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SimulatePaymentRequestToJSON(requestParameters.simulatePaymentRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSimulatePaymentFromJSON(jsonValue));
    }

    /**
     * Makes payment with matching PaymentMethodID.
     * Makes payment with matching PaymentMethodID.
     */
    async simulatePayment(requestParameters: SimulatePaymentOperationRequest): Promise<PublicSimulatePayment> {
        const response = await this.simulatePaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Simulate payment channel health
     * Simulate payment channel health
     */
    private async simulatePaymentChannelHealthRaw(requestParameters: SimulatePaymentChannelHealthRequest): Promise<runtime.ApiResponse<PublicSimulatePaymentChannelHealth>> {
        if (requestParameters.publicPostSimulatePaymentChannelHealth === null || requestParameters.publicPostSimulatePaymentChannelHealth === undefined) {
            throw new runtime.RequiredError('publicPostSimulatePaymentChannelHealth','Required parameter requestParameters.publicPostSimulatePaymentChannelHealth was null or undefined when calling simulatePaymentChannelHealth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/payment_methods/channels/simulate_health`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicPostSimulatePaymentChannelHealthToJSON(requestParameters.publicPostSimulatePaymentChannelHealth),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSimulatePaymentChannelHealthFromJSON(jsonValue));
    }

    /**
     * Simulate payment channel health
     * Simulate payment channel health
     */
    async simulatePaymentChannelHealth(requestParameters: SimulatePaymentChannelHealthRequest): Promise<PublicSimulatePaymentChannelHealth> {
        const response = await this.simulatePaymentChannelHealthRaw(requestParameters);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllPaymentChannelsIsActivatedEnum = {
    True: true,
    False: false
} as const;
export type GetAllPaymentChannelsIsActivatedEnum = typeof GetAllPaymentChannelsIsActivatedEnum[keyof typeof GetAllPaymentChannelsIsActivatedEnum];
