/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
/**
 * 
 * @export
 * @interface GetAllPaymentMethods400Response
 */
export interface GetAllPaymentMethods400Response {
    /**
     * 
     * @type {string}
     * @memberof GetAllPaymentMethods400Response
     */
    errorCode?: GetAllPaymentMethods400ResponseErrorCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof GetAllPaymentMethods400Response
     */
    message?: string;
}


/**
 * @export
 */
export const GetAllPaymentMethods400ResponseErrorCodeEnum = {
    ApiValidationError: 'API_VALIDATION_ERROR',
    NotSupportedByChannel: 'NOT_SUPPORTED_BY_CHANNEL',
    ExpiredOtpError: 'EXPIRED_OTP_ERROR',
    InvalidAccountDetails: 'INVALID_ACCOUNT_DETAILS',
    InvalidOtpError: 'INVALID_OTP_ERROR',
    InvalidPaymentMethod: 'INVALID_PAYMENT_METHOD',
    MaxOtpAttemptsError: 'MAX_OTP_ATTEMPTS_ERROR',
    CustomerNotFoundError: 'CUSTOMER_NOT_FOUND_ERROR',
    AccountAccessBlocked: 'ACCOUNT_ACCESS_BLOCKED',
    MaxAccountLinking: 'MAX_ACCOUNT_LINKING',
    InactivePaymentMethod: 'INACTIVE_PAYMENT_METHOD',
    PaymentMethodNotSupported: 'PAYMENT_METHOD_NOT_SUPPORTED',
    IncorrectAmount: 'INCORRECT_AMOUNT'
} as const;
export type GetAllPaymentMethods400ResponseErrorCodeEnum = typeof GetAllPaymentMethods400ResponseErrorCodeEnum[keyof typeof GetAllPaymentMethods400ResponseErrorCodeEnum];


/**
 * Check if a given object implements the GetAllPaymentMethods400Response interface.
 */
export function instanceOfGetAllPaymentMethods400Response(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GetAllPaymentMethods400ResponseFromJSON(json: any): GetAllPaymentMethods400Response {
    return GetAllPaymentMethods400ResponseFromJSONTyped(json, false);
}

export function GetAllPaymentMethods400ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetAllPaymentMethods400Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'errorCode': !exists(json, 'error_code') ? undefined : json['error_code'],
        'message': !exists(json, 'message') ? undefined : json['message'],
    };
}

export function GetAllPaymentMethods400ResponseToJSON(value?: GetAllPaymentMethods400Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error_code': value.errorCode,
        'message': value.message,
    };
}

