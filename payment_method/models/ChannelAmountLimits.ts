/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
/**
 * 
 * @export
 * @interface ChannelAmountLimits
 */
export interface ChannelAmountLimits {
    /**
     * Currency supported by the payment channel
     * @type {string}
     * @memberof ChannelAmountLimits
     */
    currency?: string;
    /**
     * The minimum allowed transaction amount for the payment channel
     * @type {number}
     * @memberof ChannelAmountLimits
     */
    minLimit?: number;
    /**
     * The minimum allowed transaction amount for the payment channel
     * @type {number}
     * @memberof ChannelAmountLimits
     */
    maxLimit?: number;
}

/**
 * Check if a given object implements the ChannelAmountLimits interface.
 */
export function instanceOfChannelAmountLimits(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelAmountLimitsFromJSON(json: any): ChannelAmountLimits {
    return ChannelAmountLimitsFromJSONTyped(json, false);
}

export function ChannelAmountLimitsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelAmountLimits {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'minLimit': !exists(json, 'min_limit') ? undefined : json['min_limit'],
        'maxLimit': !exists(json, 'max_limit') ? undefined : json['max_limit'],
    };
}

export function ChannelAmountLimitsToJSON(value?: ChannelAmountLimits | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currency': value.currency,
        'min_limit': value.minLimit,
        'max_limit': value.maxLimit,
    };
}

