/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { CryptoChannelCode } from './CryptoChannelCode';
import {
    CryptoChannelCodeFromJSON,
    CryptoChannelCodeFromJSONTyped,
    CryptoChannelCodeToJSON,
} from './CryptoChannelCode';
import type { CryptoChannelProperties } from './CryptoChannelProperties';
import {
    CryptoChannelPropertiesFromJSON,
    CryptoChannelPropertiesFromJSONTyped,
    CryptoChannelPropertiesToJSON,
} from './CryptoChannelProperties';
import type { CryptoWallet } from './CryptoWallet';
import {
    CryptoWalletFromJSON,
    CryptoWalletFromJSONTyped,
    CryptoWalletToJSON,
} from './CryptoWallet';

/**
 * 
 * @export
 * @interface MutableCrypto
 */
export interface MutableCrypto {
    /**
     * 
     * @type {CryptoChannelCode}
     * @memberof MutableCrypto
     */
    channelCode?: CryptoChannelCode | null;
    /**
     * 
     * @type {CryptoChannelProperties}
     * @memberof MutableCrypto
     */
    channelProperties?: CryptoChannelProperties;
    /**
     * 
     * @type {CryptoWallet}
     * @memberof MutableCrypto
     */
    wallet?: CryptoWallet | null;
}

/**
 * Check if a given object implements the MutableCrypto interface.
 */
export function instanceOfMutableCrypto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MutableCryptoFromJSON(json: any): MutableCrypto {
    return MutableCryptoFromJSONTyped(json, false);
}

export function MutableCryptoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MutableCrypto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channelCode': !exists(json, 'channel_code') ? undefined : CryptoChannelCodeFromJSON(json['channel_code']),
        'channelProperties': !exists(json, 'channel_properties') ? undefined : CryptoChannelPropertiesFromJSON(json['channel_properties']),
        'wallet': !exists(json, 'wallet') ? undefined : CryptoWalletFromJSON(json['wallet']),
    };
}

export function MutableCryptoToJSON(value?: MutableCrypto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channel_code': CryptoChannelCodeToJSON(value.channelCode),
        'channel_properties': CryptoChannelPropertiesToJSON(value.channelProperties),
        'wallet': CryptoWalletToJSON(value.wallet),
    };
}

