/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { ChannelResponseErrorsInner } from './ChannelResponseErrorsInner';
import {
    ChannelResponseErrorsInnerFromJSON,
    ChannelResponseErrorsInnerFromJSONTyped,
    ChannelResponseErrorsInnerToJSON,
} from './ChannelResponseErrorsInner';
import type { ChannelWithCountry } from './ChannelWithCountry';
import {
    ChannelWithCountryFromJSON,
    ChannelWithCountryFromJSONTyped,
    ChannelWithCountryToJSON,
} from './ChannelWithCountry';

/**
 * Channel code with country list and error list
 * @export
 * @interface ChannelResponse
 */
export interface ChannelResponse {
    /**
     * 
     * @type {Array<ChannelWithCountry>}
     * @memberof ChannelResponse
     */
    channels?: Array<ChannelWithCountry>;
    /**
     * 
     * @type {Array<ChannelResponseErrorsInner>}
     * @memberof ChannelResponse
     */
    errors?: Array<ChannelResponseErrorsInner> | null;
}

/**
 * Check if a given object implements the ChannelResponse interface.
 */
export function instanceOfChannelResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelResponseFromJSON(json: any): ChannelResponse {
    return ChannelResponseFromJSONTyped(json, false);
}

export function ChannelResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channels': !exists(json, 'channels') ? undefined : ((json['channels'] as Array<any>).map(ChannelWithCountryFromJSON)),
        'errors': !exists(json, 'errors') ? undefined : (json['errors'] === null ? null : (json['errors'] as Array<any>).map(ChannelResponseErrorsInnerFromJSON)),
    };
}

export function ChannelResponseToJSON(value?: ChannelResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channels': value.channels === undefined ? undefined : ((value.channels as Array<any>).map(ChannelWithCountryToJSON)),
        'errors': value.errors === undefined ? undefined : (value.errors === null ? null : (value.errors as Array<any>).map(ChannelResponseErrorsInnerToJSON)),
    };
}

