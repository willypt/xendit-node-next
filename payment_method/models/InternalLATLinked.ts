/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { InternalLATLinkedAccountsInner } from './InternalLATLinkedAccountsInner';
import {
    InternalLATLinkedAccountsInnerFromJSON,
    InternalLATLinkedAccountsInnerFromJSONTyped,
    InternalLATLinkedAccountsInnerToJSON,
} from './InternalLATLinkedAccountsInner';

/**
 * 
 * @export
 * @interface InternalLATLinked
 */
export interface InternalLATLinked {
    /**
     * 
     * @type {string}
     * @memberof InternalLATLinked
     */
    event: InternalLATLinkedEventEnum;
    /**
     * 
     * @type {Date}
     * @memberof InternalLATLinked
     */
    timestamp: Date;
    /**
     * 
     * @type {string}
     * @memberof InternalLATLinked
     */
    channelCode: string;
    /**
     * 
     * @type {string}
     * @memberof InternalLATLinked
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InternalLATLinked
     */
    type: InternalLATLinkedTypeEnum;
    /**
     * 
     * @type {Array<InternalLATLinkedAccountsInner>}
     * @memberof InternalLATLinked
     */
    accounts: Array<InternalLATLinkedAccountsInner>;
}


/**
 * @export
 */
export const InternalLATLinkedEventEnum = {
    LinkedAccountTokenSuccessful: 'linked_account_token.successful',
    PaymentMethodExpiryExpiring: 'payment_method.expiry.expiring',
    PaymentMethodExpiryExpired: 'payment_method.expiry.expired'
} as const;
export type InternalLATLinkedEventEnum = typeof InternalLATLinkedEventEnum[keyof typeof InternalLATLinkedEventEnum];

/**
 * @export
 */
export const InternalLATLinkedTypeEnum = {
    Ewallet: 'EWALLET',
    DirectDebit: 'DIRECT_DEBIT',
    DebitCard: 'DEBIT_CARD',
    BankAccount: 'BANK_ACCOUNT'
} as const;
export type InternalLATLinkedTypeEnum = typeof InternalLATLinkedTypeEnum[keyof typeof InternalLATLinkedTypeEnum];


/**
 * Check if a given object implements the InternalLATLinked interface.
 */
export function instanceOfInternalLATLinked(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "event" in value;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "channelCode" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "accounts" in value;

    return isInstance;
}

export function InternalLATLinkedFromJSON(json: any): InternalLATLinked {
    return InternalLATLinkedFromJSONTyped(json, false);
}

export function InternalLATLinkedFromJSONTyped(json: any, ignoreDiscriminator: boolean): InternalLATLinked {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'event': json['event'],
        'timestamp': (new Date(json['timestamp'])),
        'channelCode': json['channel_code'],
        'id': json['id'],
        'type': json['type'],
        'accounts': ((json['accounts'] as Array<any>).map(InternalLATLinkedAccountsInnerFromJSON)),
    };
}

export function InternalLATLinkedToJSON(value?: InternalLATLinked | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'event': value.event,
        'timestamp': (value.timestamp.toISOString()),
        'channel_code': value.channelCode,
        'id': value.id,
        'type': value.type,
        'accounts': ((value.accounts as Array<any>).map(InternalLATLinkedAccountsInnerToJSON)),
    };
}

