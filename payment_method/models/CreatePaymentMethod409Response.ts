/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
/**
 * 
 * @export
 * @interface CreatePaymentMethod409Response
 */
export interface CreatePaymentMethod409Response {
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentMethod409Response
     */
    errorCode?: CreatePaymentMethod409ResponseErrorCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentMethod409Response
     */
    message?: string;
}


/**
 * @export
 */
export const CreatePaymentMethod409ResponseErrorCodeEnum = {
    PaymentMethodAlreadyActive: 'PAYMENT_METHOD_ALREADY_ACTIVE',
    PaymentMethodAlreadyFailed: 'PAYMENT_METHOD_ALREADY_FAILED',
    DuplicateError: 'DUPLICATE_ERROR',
    IdempotencyError: 'IDEMPOTENCY_ERROR'
} as const;
export type CreatePaymentMethod409ResponseErrorCodeEnum = typeof CreatePaymentMethod409ResponseErrorCodeEnum[keyof typeof CreatePaymentMethod409ResponseErrorCodeEnum];


/**
 * Check if a given object implements the CreatePaymentMethod409Response interface.
 */
export function instanceOfCreatePaymentMethod409Response(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreatePaymentMethod409ResponseFromJSON(json: any): CreatePaymentMethod409Response {
    return CreatePaymentMethod409ResponseFromJSONTyped(json, false);
}

export function CreatePaymentMethod409ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreatePaymentMethod409Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'errorCode': !exists(json, 'error_code') ? undefined : json['error_code'],
        'message': !exists(json, 'message') ? undefined : json['message'],
    };
}

export function CreatePaymentMethod409ResponseToJSON(value?: CreatePaymentMethod409Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error_code': value.errorCode,
        'message': value.message,
    };
}

