/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { InternalDirectDebit } from './InternalDirectDebit';
import {
    InternalDirectDebitFromJSON,
    InternalDirectDebitFromJSONTyped,
    InternalDirectDebitToJSON,
} from './InternalDirectDebit';
import type { InternalEwallet } from './InternalEwallet';
import {
    InternalEwalletFromJSON,
    InternalEwalletFromJSONTyped,
    InternalEwalletToJSON,
} from './InternalEwallet';
import type { PaymentMethodAction } from './PaymentMethodAction';
import {
    PaymentMethodActionFromJSON,
    PaymentMethodActionFromJSONTyped,
    PaymentMethodActionToJSON,
} from './PaymentMethodAction';
import type { PaymentMethodCountry } from './PaymentMethodCountry';
import {
    PaymentMethodCountryFromJSON,
    PaymentMethodCountryFromJSONTyped,
    PaymentMethodCountryToJSON,
} from './PaymentMethodCountry';
import type { PaymentMethodReusability } from './PaymentMethodReusability';
import {
    PaymentMethodReusabilityFromJSON,
    PaymentMethodReusabilityFromJSONTyped,
    PaymentMethodReusabilityToJSON,
} from './PaymentMethodReusability';
import type { PaymentMethodStatus } from './PaymentMethodStatus';
import {
    PaymentMethodStatusFromJSON,
    PaymentMethodStatusFromJSONTyped,
    PaymentMethodStatusToJSON,
} from './PaymentMethodStatus';
import type { PaymentMethodType } from './PaymentMethodType';
import {
    PaymentMethodTypeFromJSON,
    PaymentMethodTypeFromJSONTyped,
    PaymentMethodTypeToJSON,
} from './PaymentMethodType';

/**
 * 
 * @export
 * @interface InternalV1CreatePaymentMethod
 */
export interface InternalV1CreatePaymentMethod {
    /**
     * 
     * @type {string}
     * @memberof InternalV1CreatePaymentMethod
     */
    id?: string;
    /**
     * 
     * @type {PaymentMethodType}
     * @memberof InternalV1CreatePaymentMethod
     */
    type: PaymentMethodType;
    /**
     * 
     * @type {PaymentMethodCountry}
     * @memberof InternalV1CreatePaymentMethod
     */
    country?: PaymentMethodCountry;
    /**
     * 
     * @type {PaymentMethodStatus}
     * @memberof InternalV1CreatePaymentMethod
     */
    status?: PaymentMethodStatus;
    /**
     * 
     * @type {string}
     * @memberof InternalV1CreatePaymentMethod
     */
    businessId?: string;
    /**
     * 
     * @type {string}
     * @memberof InternalV1CreatePaymentMethod
     */
    customerId?: string | null;
    /**
     * 
     * @type {PaymentMethodReusability}
     * @memberof InternalV1CreatePaymentMethod
     */
    reusability?: PaymentMethodReusability;
    /**
     * 
     * @type {InternalEwallet}
     * @memberof InternalV1CreatePaymentMethod
     */
    ewallet?: InternalEwallet | null;
    /**
     * 
     * @type {InternalDirectDebit}
     * @memberof InternalV1CreatePaymentMethod
     */
    directDebit?: InternalDirectDebit | null;
    /**
     * 
     * @type {object}
     * @memberof InternalV1CreatePaymentMethod
     */
    metadata?: object | null;
    /**
     * 
     * @type {object}
     * @memberof InternalV1CreatePaymentMethod
     */
    internalMetadata?: object | null;
    /**
     * 
     * @type {Array<PaymentMethodAction>}
     * @memberof InternalV1CreatePaymentMethod
     */
    actions?: Array<PaymentMethodAction>;
    /**
     * 
     * @type {Date}
     * @memberof InternalV1CreatePaymentMethod
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InternalV1CreatePaymentMethod
     */
    updated?: Date;
}

/**
 * Check if a given object implements the InternalV1CreatePaymentMethod interface.
 */
export function instanceOfInternalV1CreatePaymentMethod(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function InternalV1CreatePaymentMethodFromJSON(json: any): InternalV1CreatePaymentMethod {
    return InternalV1CreatePaymentMethodFromJSONTyped(json, false);
}

export function InternalV1CreatePaymentMethodFromJSONTyped(json: any, ignoreDiscriminator: boolean): InternalV1CreatePaymentMethod {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': PaymentMethodTypeFromJSON(json['type']),
        'country': !exists(json, 'country') ? undefined : PaymentMethodCountryFromJSON(json['country']),
        'status': !exists(json, 'status') ? undefined : PaymentMethodStatusFromJSON(json['status']),
        'businessId': !exists(json, 'business_id') ? undefined : json['business_id'],
        'customerId': !exists(json, 'customer_id') ? undefined : json['customer_id'],
        'reusability': !exists(json, 'reusability') ? undefined : PaymentMethodReusabilityFromJSON(json['reusability']),
        'ewallet': !exists(json, 'ewallet') ? undefined : InternalEwalletFromJSON(json['ewallet']),
        'directDebit': !exists(json, 'direct_debit') ? undefined : InternalDirectDebitFromJSON(json['direct_debit']),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'internalMetadata': !exists(json, 'internal_metadata') ? undefined : json['internal_metadata'],
        'actions': !exists(json, 'actions') ? undefined : ((json['actions'] as Array<any>).map(PaymentMethodActionFromJSON)),
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'updated': !exists(json, 'updated') ? undefined : (new Date(json['updated'])),
    };
}

export function InternalV1CreatePaymentMethodToJSON(value?: InternalV1CreatePaymentMethod | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': PaymentMethodTypeToJSON(value.type),
        'country': PaymentMethodCountryToJSON(value.country),
        'status': PaymentMethodStatusToJSON(value.status),
        'business_id': value.businessId,
        'customer_id': value.customerId,
        'reusability': PaymentMethodReusabilityToJSON(value.reusability),
        'ewallet': InternalEwalletToJSON(value.ewallet),
        'direct_debit': InternalDirectDebitToJSON(value.directDebit),
        'metadata': value.metadata,
        'internal_metadata': value.internalMetadata,
        'actions': value.actions === undefined ? undefined : ((value.actions as Array<any>).map(PaymentMethodActionToJSON)),
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
        'updated': value.updated === undefined ? undefined : (value.updated.toISOString()),
    };
}

