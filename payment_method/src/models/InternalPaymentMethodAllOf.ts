/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { InternalCard } from './InternalCard';
import {
    InternalCardFromJSON,
    InternalCardFromJSONTyped,
    InternalCardToJSON,
} from './InternalCard';
import type { InternalCrypto } from './InternalCrypto';
import {
    InternalCryptoFromJSON,
    InternalCryptoFromJSONTyped,
    InternalCryptoToJSON,
} from './InternalCrypto';
import type { InternalDirectBankTransfer } from './InternalDirectBankTransfer';
import {
    InternalDirectBankTransferFromJSON,
    InternalDirectBankTransferFromJSONTyped,
    InternalDirectBankTransferToJSON,
} from './InternalDirectBankTransfer';
import type { InternalDirectDebit } from './InternalDirectDebit';
import {
    InternalDirectDebitFromJSON,
    InternalDirectDebitFromJSONTyped,
    InternalDirectDebitToJSON,
} from './InternalDirectDebit';
import type { InternalEwallet } from './InternalEwallet';
import {
    InternalEwalletFromJSON,
    InternalEwalletFromJSONTyped,
    InternalEwalletToJSON,
} from './InternalEwallet';
import type { InternalOverTheCounter } from './InternalOverTheCounter';
import {
    InternalOverTheCounterFromJSON,
    InternalOverTheCounterFromJSONTyped,
    InternalOverTheCounterToJSON,
} from './InternalOverTheCounter';
import type { InternalQRCode } from './InternalQRCode';
import {
    InternalQRCodeFromJSON,
    InternalQRCodeFromJSONTyped,
    InternalQRCodeToJSON,
} from './InternalQRCode';
import type { InternalVirtualAccount } from './InternalVirtualAccount';
import {
    InternalVirtualAccountFromJSON,
    InternalVirtualAccountFromJSONTyped,
    InternalVirtualAccountToJSON,
} from './InternalVirtualAccount';

/**
 * 
 * @export
 * @interface InternalPaymentMethodAllOf
 */
export interface InternalPaymentMethodAllOf {
    /**
     * 
     * @type {InternalEwallet}
     * @memberof InternalPaymentMethodAllOf
     */
    ewallet?: InternalEwallet | null;
    /**
     * 
     * @type {InternalCard}
     * @memberof InternalPaymentMethodAllOf
     */
    card?: InternalCard | null;
    /**
     * 
     * @type {InternalCrypto}
     * @memberof InternalPaymentMethodAllOf
     */
    cryptocurrency?: InternalCrypto | null;
    /**
     * 
     * @type {InternalDirectBankTransfer}
     * @memberof InternalPaymentMethodAllOf
     */
    directBankTransfer?: InternalDirectBankTransfer | null;
    /**
     * 
     * @type {InternalDirectDebit}
     * @memberof InternalPaymentMethodAllOf
     */
    directDebit?: InternalDirectDebit | null;
    /**
     * 
     * @type {InternalOverTheCounter}
     * @memberof InternalPaymentMethodAllOf
     */
    overTheCounter?: InternalOverTheCounter | null;
    /**
     * 
     * @type {InternalVirtualAccount}
     * @memberof InternalPaymentMethodAllOf
     */
    virtualAccount?: InternalVirtualAccount | null;
    /**
     * 
     * @type {InternalQRCode}
     * @memberof InternalPaymentMethodAllOf
     */
    qrCode?: InternalQRCode | null;
    /**
     * 
     * @type {string}
     * @memberof InternalPaymentMethodAllOf
     */
    xCallbackUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InternalPaymentMethodAllOf
     */
    clientType?: string | null;
    /**
     * 
     * @type {object}
     * @memberof InternalPaymentMethodAllOf
     */
    internalMetadata?: object | null;
}

/**
 * Check if a given object implements the InternalPaymentMethodAllOf interface.
 */
export function instanceOfInternalPaymentMethodAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InternalPaymentMethodAllOfFromJSON(json: any): InternalPaymentMethodAllOf {
    return InternalPaymentMethodAllOfFromJSONTyped(json, false);
}

export function InternalPaymentMethodAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): InternalPaymentMethodAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ewallet': !exists(json, 'ewallet') ? undefined : InternalEwalletFromJSON(json['ewallet']),
        'card': !exists(json, 'card') ? undefined : InternalCardFromJSON(json['card']),
        'cryptocurrency': !exists(json, 'cryptocurrency') ? undefined : InternalCryptoFromJSON(json['cryptocurrency']),
        'directBankTransfer': !exists(json, 'direct_bank_transfer') ? undefined : InternalDirectBankTransferFromJSON(json['direct_bank_transfer']),
        'directDebit': !exists(json, 'direct_debit') ? undefined : InternalDirectDebitFromJSON(json['direct_debit']),
        'overTheCounter': !exists(json, 'over_the_counter') ? undefined : InternalOverTheCounterFromJSON(json['over_the_counter']),
        'virtualAccount': !exists(json, 'virtual_account') ? undefined : InternalVirtualAccountFromJSON(json['virtual_account']),
        'qrCode': !exists(json, 'qr_code') ? undefined : InternalQRCodeFromJSON(json['qr_code']),
        'xCallbackUrl': !exists(json, 'x-callback-url') ? undefined : json['x-callback-url'],
        'clientType': !exists(json, 'client_type') ? undefined : json['client_type'],
        'internalMetadata': !exists(json, 'internal_metadata') ? undefined : json['internal_metadata'],
    };
}

export function InternalPaymentMethodAllOfToJSON(value?: InternalPaymentMethodAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ewallet': InternalEwalletToJSON(value.ewallet),
        'card': InternalCardToJSON(value.card),
        'cryptocurrency': InternalCryptoToJSON(value.cryptocurrency),
        'direct_bank_transfer': InternalDirectBankTransferToJSON(value.directBankTransfer),
        'direct_debit': InternalDirectDebitToJSON(value.directDebit),
        'over_the_counter': InternalOverTheCounterToJSON(value.overTheCounter),
        'virtual_account': InternalVirtualAccountToJSON(value.virtualAccount),
        'qr_code': InternalQRCodeToJSON(value.qrCode),
        'x-callback-url': value.xCallbackUrl,
        'client_type': value.clientType,
        'internal_metadata': value.internalMetadata,
    };
}

