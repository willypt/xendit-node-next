/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { EwalletAccount } from './EwalletAccount';
import {
    EwalletAccountFromJSON,
    EwalletAccountFromJSONTyped,
    EwalletAccountToJSON,
} from './EwalletAccount';
import type { EwalletChannelCode } from './EwalletChannelCode';
import {
    EwalletChannelCodeFromJSON,
    EwalletChannelCodeFromJSONTyped,
    EwalletChannelCodeToJSON,
} from './EwalletChannelCode';
import type { EwalletChannelProperties } from './EwalletChannelProperties';
import {
    EwalletChannelPropertiesFromJSON,
    EwalletChannelPropertiesFromJSONTyped,
    EwalletChannelPropertiesToJSON,
} from './EwalletChannelProperties';

/**
 * Ewallet Payment Method Details
 * @export
 * @interface InternalEwallet
 */
export interface InternalEwallet {
    /**
     * 
     * @type {EwalletChannelCode}
     * @memberof InternalEwallet
     */
    channelCode: EwalletChannelCode;
    /**
     * 
     * @type {EwalletChannelProperties}
     * @memberof InternalEwallet
     */
    channelProperties?: EwalletChannelProperties;
    /**
     * 
     * @type {EwalletAccount}
     * @memberof InternalEwallet
     */
    account?: EwalletAccount;
    /**
     * 
     * @type {string}
     * @memberof InternalEwallet
     */
    linkedAccountTokenId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InternalEwallet
     */
    linkedAccountId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InternalEwallet
     */
    accessToken?: string | null;
}

/**
 * Check if a given object implements the InternalEwallet interface.
 */
export function instanceOfInternalEwallet(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "channelCode" in value;

    return isInstance;
}

export function InternalEwalletFromJSON(json: any): InternalEwallet {
    return InternalEwalletFromJSONTyped(json, false);
}

export function InternalEwalletFromJSONTyped(json: any, ignoreDiscriminator: boolean): InternalEwallet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channelCode': EwalletChannelCodeFromJSON(json['channel_code']),
        'channelProperties': !exists(json, 'channel_properties') ? undefined : EwalletChannelPropertiesFromJSON(json['channel_properties']),
        'account': !exists(json, 'account') ? undefined : EwalletAccountFromJSON(json['account']),
        'linkedAccountTokenId': !exists(json, 'linked_account_token_id') ? undefined : json['linked_account_token_id'],
        'linkedAccountId': !exists(json, 'linked_account_id') ? undefined : json['linked_account_id'],
        'accessToken': !exists(json, 'access_token') ? undefined : json['access_token'],
    };
}

export function InternalEwalletToJSON(value?: InternalEwallet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channel_code': EwalletChannelCodeToJSON(value.channelCode),
        'channel_properties': EwalletChannelPropertiesToJSON(value.channelProperties),
        'account': EwalletAccountToJSON(value.account),
        'linked_account_token_id': value.linkedAccountTokenId,
        'linked_account_id': value.linkedAccountId,
        'access_token': value.accessToken,
    };
}

