/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { ChannelPropertiesRequest } from './ChannelPropertiesRequest';
import {
    ChannelPropertiesRequestFromJSON,
    ChannelPropertiesRequestFromJSONTyped,
    ChannelPropertiesRequestToJSON,
} from './ChannelPropertiesRequest';
import type { ReceiptNotification } from './ReceiptNotification';
import {
    ReceiptNotificationFromJSON,
    ReceiptNotificationFromJSONTyped,
    ReceiptNotificationToJSON,
} from './ReceiptNotification';

/**
 * 
 * @export
 * @interface PayoutV2Request
 */
export interface PayoutV2Request {
    /**
     * A client defined payout identifier
     * @type {string}
     * @memberof PayoutV2Request
     */
    referenceId: string;
    /**
     * Channel code of selected destination bank, e-wallet or OTC pick-up channel
     * @type {string}
     * @memberof PayoutV2Request
     */
    channelCode: string;
    /**
     * 
     * @type {ChannelPropertiesRequest}
     * @memberof PayoutV2Request
     */
    channelProperties: ChannelPropertiesRequest;
    /**
     * Amount to be sent to the destination account. Should be a multiple of the minimum increment for the selected channel.
     * @type {number}
     * @memberof PayoutV2Request
     */
    amount: number;
    /**
     * Description to send with the payout. The recipient may see this e.g., in their bank statement (if supported) or in email receipts we send on your behalf.
     * @type {string}
     * @memberof PayoutV2Request
     */
    description?: string;
    /**
     * ISO 4217 Currency Code
     * @type {string}
     * @memberof PayoutV2Request
     */
    currency: string;
    /**
     * 
     * @type {ReceiptNotification}
     * @memberof PayoutV2Request
     */
    receiptNotification?: ReceiptNotification;
    /**
     * Object of additional information you may use.
     * @type {object}
     * @memberof PayoutV2Request
     */
    metadata?: object;
}

/**
 * Check if a given object implements the PayoutV2Request interface.
 */
export function instanceOfPayoutV2Request(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "referenceId" in value;
    isInstance = isInstance && "channelCode" in value;
    isInstance = isInstance && "channelProperties" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "currency" in value;

    return isInstance;
}

export function PayoutV2RequestFromJSON(json: any): PayoutV2Request {
    return PayoutV2RequestFromJSONTyped(json, false);
}

export function PayoutV2RequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayoutV2Request {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'referenceId': json['reference_id'],
        'channelCode': json['channel_code'],
        'channelProperties': ChannelPropertiesRequestFromJSON(json['channel_properties']),
        'amount': json['amount'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'currency': json['currency'],
        'receiptNotification': !exists(json, 'receipt_notification') ? undefined : ReceiptNotificationFromJSON(json['receipt_notification']),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function PayoutV2RequestToJSON(value?: PayoutV2Request | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reference_id': value.referenceId,
        'channel_code': value.channelCode,
        'channel_properties': ChannelPropertiesRequestToJSON(value.channelProperties),
        'amount': value.amount,
        'description': value.description,
        'currency': value.currency,
        'receipt_notification': ReceiptNotificationToJSON(value.receiptNotification),
        'metadata': value.metadata,
    };
}

