/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */


import * as runtime from '../../runtime';
import type {
  Capture,
  CaptureListResponse,
  CreateCapture,
  General,
  PublicCreatePaymentRequest,
  PublicPaymentRequest,
  PublicPaymentRequestAuthorize,
  PublicPaymentRequestListResponse,
} from '../models';
import {
    CaptureFromJSON,
    CaptureToJSON,
    CaptureListResponseFromJSON,
    CaptureListResponseToJSON,
    CreateCaptureFromJSON,
    CreateCaptureToJSON,
    GeneralFromJSON,
    GeneralToJSON,
    PublicCreatePaymentRequestFromJSON,
    PublicCreatePaymentRequestToJSON,
    PublicPaymentRequestFromJSON,
    PublicPaymentRequestToJSON,
    PublicPaymentRequestAuthorizeFromJSON,
    PublicPaymentRequestAuthorizeToJSON,
    PublicPaymentRequestListResponseFromJSON,
    PublicPaymentRequestListResponseToJSON,
} from '../models';

export interface CreatePaymentRequestRequest {
    idempotencyKey?: string;
    publicCreatePaymentRequest?: PublicCreatePaymentRequest;
}

export interface GetAllPaymentRequestsRequest {
    referenceId?: Array<string>;
    limit?: number;
    idempotencyKey?: string;
}

export interface GetPaymentRequestByIDRequest {
    paymentRequestId: string;
    idempotencyKey?: string;
}

export interface GetPaymentRequestCaptureRequest {
    paymentRequestId: string;
    limit?: number;
    afterId?: string;
    beforeId?: string;
    idempotencyKey?: string;
}

export interface PaymentRequestAuthorizeRequest {
    paymentRequestId: string;
    idempotencyKey?: string;
    publicPaymentRequestAuthorize?: PublicPaymentRequestAuthorize;
}

export interface PaymentRequestCaptureRequest {
    paymentRequestId: string;
    idempotencyKey?: string;
    createCapture?: CreateCapture;
}

export interface PaymentRequestResendAuthRequest {
    paymentRequestId: string;
    idempotencyKey?: string;
}

/**
 * 
 */
export class PaymentRequestApi extends runtime.BaseAPI {

    secretKey: string;
    xenditURL: string;

    constructor({secretKey, xenditURL}: {secretKey: string, xenditURL?: string}) {
        super()
        this.secretKey = secretKey;
        this.xenditURL = xenditURL || 'https://api.xendit.co';
    }

    /**
     * Create Payment Request
     * Create Payment Request
     */
    private async createPaymentRequestRaw(requestParameters: CreatePaymentRequestRequest): Promise<runtime.ApiResponse<PublicPaymentRequest>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicCreatePaymentRequestToJSON(requestParameters.publicCreatePaymentRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentRequestFromJSON(jsonValue));
    }

    /**
     * Create Payment Request
     * Create Payment Request
     */
    async createPaymentRequest(idempotencyKey?: string, publicCreatePaymentRequest?: PublicCreatePaymentRequest, ): Promise<PublicPaymentRequest> {
        const response = await this.createPaymentRequestRaw({ idempotencyKey: idempotencyKey, publicCreatePaymentRequest: publicCreatePaymentRequest });
        return await response.value();
    }

    /**
     * Get all payment requests by filter
     * Get all payment requests by filter
     */
    private async getAllPaymentRequestsRaw(requestParameters: GetAllPaymentRequestsRequest): Promise<runtime.ApiResponse<PublicPaymentRequestListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.referenceId) {
            queryParameters['reference_id'] = requestParameters.referenceId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentRequestListResponseFromJSON(jsonValue));
    }

    /**
     * Get all payment requests by filter
     * Get all payment requests by filter
     */
    async getAllPaymentRequests(referenceId?: Array<string>, limit?: number, idempotencyKey?: string, ): Promise<PublicPaymentRequestListResponse> {
        const response = await this.getAllPaymentRequestsRaw({ referenceId: referenceId, limit: limit, idempotencyKey: idempotencyKey });
        return await response.value();
    }

    /**
     * Get payment request by ID
     * Get payment request by ID
     */
    private async getPaymentRequestByIDRaw(requestParameters: GetPaymentRequestByIDRequest): Promise<runtime.ApiResponse<PublicPaymentRequest>> {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId','Required parameter requestParameters.paymentRequestId was null or undefined when calling getPaymentRequestByID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentRequestFromJSON(jsonValue));
    }

    /**
     * Get payment request by ID
     * Get payment request by ID
     */
    async getPaymentRequestByID(paymentRequestId: string, idempotencyKey?: string, ): Promise<PublicPaymentRequest> {
        const response = await this.getPaymentRequestByIDRaw({ paymentRequestId: paymentRequestId, idempotencyKey: idempotencyKey });
        return await response.value();
    }

    /**
     * Get Payment Request Capture
     * Get Payment Request Capture
     */
    private async getPaymentRequestCaptureRaw(requestParameters: GetPaymentRequestCaptureRequest): Promise<runtime.ApiResponse<CaptureListResponse>> {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId','Required parameter requestParameters.paymentRequestId was null or undefined when calling getPaymentRequestCapture.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }

        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/captures`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptureListResponseFromJSON(jsonValue));
    }

    /**
     * Get Payment Request Capture
     * Get Payment Request Capture
     */
    async getPaymentRequestCapture(paymentRequestId: string, limit?: number, afterId?: string, beforeId?: string, idempotencyKey?: string, ): Promise<CaptureListResponse> {
        const response = await this.getPaymentRequestCaptureRaw({ paymentRequestId: paymentRequestId, limit: limit, afterId: afterId, beforeId: beforeId, idempotencyKey: idempotencyKey });
        return await response.value();
    }

    /**
     * Payment Request Authorize
     * Payment Request Authorize
     */
    private async paymentRequestAuthorizeRaw(requestParameters: PaymentRequestAuthorizeRequest): Promise<runtime.ApiResponse<PublicPaymentRequest>> {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId','Required parameter requestParameters.paymentRequestId was null or undefined when calling paymentRequestAuthorize.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/auth`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicPaymentRequestAuthorizeToJSON(requestParameters.publicPaymentRequestAuthorize),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentRequestFromJSON(jsonValue));
    }

    /**
     * Payment Request Authorize
     * Payment Request Authorize
     */
    async paymentRequestAuthorize(paymentRequestId: string, idempotencyKey?: string, publicPaymentRequestAuthorize?: PublicPaymentRequestAuthorize, ): Promise<PublicPaymentRequest> {
        const response = await this.paymentRequestAuthorizeRaw({ paymentRequestId: paymentRequestId, idempotencyKey: idempotencyKey, publicPaymentRequestAuthorize: publicPaymentRequestAuthorize });
        return await response.value();
    }

    /**
     * Payment Request Capture
     * Payment Request Capture
     */
    private async paymentRequestCaptureRaw(requestParameters: PaymentRequestCaptureRequest): Promise<runtime.ApiResponse<Capture>> {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId','Required parameter requestParameters.paymentRequestId was null or undefined when calling paymentRequestCapture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/captures`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCaptureToJSON(requestParameters.createCapture),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptureFromJSON(jsonValue));
    }

    /**
     * Payment Request Capture
     * Payment Request Capture
     */
    async paymentRequestCapture(paymentRequestId: string, idempotencyKey?: string, createCapture?: CreateCapture, ): Promise<Capture> {
        const response = await this.paymentRequestCaptureRaw({ paymentRequestId: paymentRequestId, idempotencyKey: idempotencyKey, createCapture: createCapture });
        return await response.value();
    }

    /**
     * Payment Request Resend Auth
     * Payment Request Resend Auth
     */
    private async paymentRequestResendAuthRaw(requestParameters: PaymentRequestResendAuthRequest): Promise<runtime.ApiResponse<PublicPaymentRequest>> {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId','Required parameter requestParameters.paymentRequestId was null or undefined when calling paymentRequestResendAuth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/auth/resend`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentRequestFromJSON(jsonValue));
    }

    /**
     * Payment Request Resend Auth
     * Payment Request Resend Auth
     */
    async paymentRequestResendAuth(paymentRequestId: string, idempotencyKey?: string, ): Promise<PublicPaymentRequest> {
        const response = await this.paymentRequestResendAuthRaw({ paymentRequestId: paymentRequestId, idempotencyKey: idempotencyKey });
        return await response.value();
    }

}
