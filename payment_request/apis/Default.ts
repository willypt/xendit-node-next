/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */


import * as runtime from '../../runtime';
import type {
  Capture,
  CaptureListResponse,
  CreateCapture,
  General,
  PublicCreatePaymentRequestSDK,
  PublicPaymentRequest,
  PublicPaymentRequestAuthorize,
  PublicPaymentRequestListResponse,
} from '../models';
import {
    CaptureFromJSON,
    CaptureToJSON,
    CaptureListResponseFromJSON,
    CaptureListResponseToJSON,
    CreateCaptureFromJSON,
    CreateCaptureToJSON,
    GeneralFromJSON,
    GeneralToJSON,
    PublicCreatePaymentRequestSDKFromJSON,
    PublicCreatePaymentRequestSDKToJSON,
    PublicPaymentRequestFromJSON,
    PublicPaymentRequestToJSON,
    PublicPaymentRequestAuthorizeFromJSON,
    PublicPaymentRequestAuthorizeToJSON,
    PublicPaymentRequestListResponseFromJSON,
    PublicPaymentRequestListResponseToJSON,
} from '../models';

export interface AuthorizePaymentRequestRequest {
    paymentRequestId: string;
    idempotencyKey?: string;
    publicPaymentRequestAuthorize?: PublicPaymentRequestAuthorize;
}

export interface CapturePaymentRequestRequest {
    paymentRequestId: string;
    idempotencyKey?: string;
    createCapture?: CreateCapture;
}

export interface CreatePaymentRequestRequest {
    idempotencyKey?: string;
    publicCreatePaymentRequestSDK?: PublicCreatePaymentRequestSDK;
}

export interface GetAllPaymentRequestsRequest {
    referenceId?: Array<string>;
    id?: Array<string>;
    customerId?: Array<string>;
    limit?: number;
    beforeId?: string;
    afterId?: string;
    idempotencyKey?: string;
}

export interface GetPaymentRequestByIDRequest {
    paymentRequestId: string;
    idempotencyKey?: string;
}

export interface GetPaymentRequestCapturesRequest {
    paymentRequestId: string;
    limit?: number;
    afterId?: string;
    beforeId?: string;
    idempotencyKey?: string;
}

export interface ResendPaymentRequestAuthRequest {
    paymentRequestId: string;
    idempotencyKey?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    secretKey: string;
    xenditURL: string;

    constructor({secretKey, xenditURL}: {secretKey: string, xenditURL?: string}) {
        super()
        this.secretKey = secretKey;
        this.xenditURL = xenditURL || 'https://api.xendit.co';
    }

    /**
     * Payment Request Authorize
     * Payment Request Authorize
     */
    private async authorizePaymentRequestRaw(requestParameters: AuthorizePaymentRequestRequest): Promise<runtime.ApiResponse<PublicPaymentRequest>> {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId','Required parameter requestParameters.paymentRequestId was null or undefined when calling authorizePaymentRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/auth`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicPaymentRequestAuthorizeToJSON(requestParameters.publicPaymentRequestAuthorize),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentRequestFromJSON(jsonValue));
    }

    /**
     * Payment Request Authorize
     * Payment Request Authorize
     */
    async authorizePaymentRequest(requestParameters: AuthorizePaymentRequestRequest): Promise<PublicPaymentRequest> {
        const response = await this.authorizePaymentRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * Payment Request Capture
     * Payment Request Capture
     */
    private async capturePaymentRequestRaw(requestParameters: CapturePaymentRequestRequest): Promise<runtime.ApiResponse<Capture>> {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId','Required parameter requestParameters.paymentRequestId was null or undefined when calling capturePaymentRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/captures`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCaptureToJSON(requestParameters.createCapture),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptureFromJSON(jsonValue));
    }

    /**
     * Payment Request Capture
     * Payment Request Capture
     */
    async capturePaymentRequest(requestParameters: CapturePaymentRequestRequest): Promise<Capture> {
        const response = await this.capturePaymentRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Payment Request
     * Create Payment Request
     */
    private async createPaymentRequestRaw(requestParameters: CreatePaymentRequestRequest): Promise<runtime.ApiResponse<PublicPaymentRequest>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicCreatePaymentRequestSDKToJSON(requestParameters.publicCreatePaymentRequestSDK),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentRequestFromJSON(jsonValue));
    }

    /**
     * Create Payment Request
     * Create Payment Request
     */
    async createPaymentRequest(requestParameters: CreatePaymentRequestRequest = {}): Promise<PublicPaymentRequest> {
        const response = await this.createPaymentRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all payment requests by filter
     * Get all payment requests by filter
     */
    private async getAllPaymentRequestsRaw(requestParameters: GetAllPaymentRequestsRequest): Promise<runtime.ApiResponse<PublicPaymentRequestListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.referenceId) {
            queryParameters['reference_id'] = requestParameters.referenceId;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.customerId) {
            queryParameters['customer_id'] = requestParameters.customerId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }

        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentRequestListResponseFromJSON(jsonValue));
    }

    /**
     * Get all payment requests by filter
     * Get all payment requests by filter
     */
    async getAllPaymentRequests(requestParameters: GetAllPaymentRequestsRequest = {}): Promise<PublicPaymentRequestListResponse> {
        const response = await this.getAllPaymentRequestsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get payment request by ID
     * Get payment request by ID
     */
    private async getPaymentRequestByIDRaw(requestParameters: GetPaymentRequestByIDRequest): Promise<runtime.ApiResponse<PublicPaymentRequest>> {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId','Required parameter requestParameters.paymentRequestId was null or undefined when calling getPaymentRequestByID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentRequestFromJSON(jsonValue));
    }

    /**
     * Get payment request by ID
     * Get payment request by ID
     */
    async getPaymentRequestByID(requestParameters: GetPaymentRequestByIDRequest): Promise<PublicPaymentRequest> {
        const response = await this.getPaymentRequestByIDRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Payment Request Capture
     * Get Payment Request Capture
     */
    private async getPaymentRequestCapturesRaw(requestParameters: GetPaymentRequestCapturesRequest): Promise<runtime.ApiResponse<CaptureListResponse>> {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId','Required parameter requestParameters.paymentRequestId was null or undefined when calling getPaymentRequestCaptures.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }

        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/captures`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptureListResponseFromJSON(jsonValue));
    }

    /**
     * Get Payment Request Capture
     * Get Payment Request Capture
     */
    async getPaymentRequestCaptures(requestParameters: GetPaymentRequestCapturesRequest): Promise<CaptureListResponse> {
        const response = await this.getPaymentRequestCapturesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Payment Request Resend Auth
     * Payment Request Resend Auth
     */
    private async resendPaymentRequestAuthRaw(requestParameters: ResendPaymentRequestAuthRequest): Promise<runtime.ApiResponse<PublicPaymentRequest>> {
        if (requestParameters.paymentRequestId === null || requestParameters.paymentRequestId === undefined) {
            throw new runtime.RequiredError('paymentRequestId','Required parameter requestParameters.paymentRequestId was null or undefined when calling resendPaymentRequestAuth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payment_requests/{paymentRequestId}/auth/resend`.replace(`{${"paymentRequestId"}}`, encodeURIComponent(String(requestParameters.paymentRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicPaymentRequestFromJSON(jsonValue));
    }

    /**
     * Payment Request Resend Auth
     * Payment Request Resend Auth
     */
    async resendPaymentRequestAuth(requestParameters: ResendPaymentRequestAuthRequest): Promise<PublicPaymentRequest> {
        const response = await this.resendPaymentRequestAuthRaw(requestParameters);
        return await response.value();
    }

}
