/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { ChannelPropertiesRequest } from './ChannelPropertiesRequest';
import {
    ChannelPropertiesRequestFromJSON,
    ChannelPropertiesRequestFromJSONTyped,
    ChannelPropertiesRequestToJSON,
} from './ChannelPropertiesRequest';
import type { ReceiptNotification } from './ReceiptNotification';
import {
    ReceiptNotificationFromJSON,
    ReceiptNotificationFromJSONTyped,
    ReceiptNotificationToJSON,
} from './ReceiptNotification';

/**
 * 
 * @export
 * @interface PayoutV2Response
 */
export interface PayoutV2Response {
    /**
     * A client defined payout identifier
     * @type {string}
     * @memberof PayoutV2Response
     */
    referenceId: string;
    /**
     * Channel code of selected destination bank, e-wallet or OTC pick-up channel
     * @type {string}
     * @memberof PayoutV2Response
     */
    channelCode: string;
    /**
     * 
     * @type {ChannelPropertiesRequest}
     * @memberof PayoutV2Response
     */
    channelProperties: ChannelPropertiesRequest;
    /**
     * Amount to be sent to the destination account. Should be a multiple of the minimum increment for the selected channel.
     * @type {number}
     * @memberof PayoutV2Response
     */
    amount: number;
    /**
     * Description to send with the payout. The recipient may see this e.g., in their bank statement (if supported) or in email receipts we send on your behalf.
     * @type {string}
     * @memberof PayoutV2Response
     */
    description?: string;
    /**
     * ISO 4217 Currency Code
     * @type {string}
     * @memberof PayoutV2Response
     */
    currency: string;
    /**
     * 
     * @type {ReceiptNotification}
     * @memberof PayoutV2Response
     */
    receiptNotification?: ReceiptNotification;
    /**
     * Object of additional information you may use.
     * @type {object}
     * @memberof PayoutV2Response
     */
    metadata?: object;
    /**
     * Xendit-generated unique identifier for each payout
     * @type {string}
     * @memberof PayoutV2Response
     */
    id: string;
    /**
     * ISO 8601
     * @type {Date}
     * @memberof PayoutV2Response
     */
    created: Date;
    /**
     * ISO 8601
     * @type {Date}
     * @memberof PayoutV2Response
     */
    updated: Date;
    /**
     * Xendit Business ID
     * @type {string}
     * @memberof PayoutV2Response
     */
    businessId: string;
    /**
     * Status of payout
     * @type {string}
     * @memberof PayoutV2Response
     */
    status: PayoutV2ResponseStatusEnum;
    /**
     * If the Payout failed, we include a failure code for more details on the failure.
     * @type {string}
     * @memberof PayoutV2Response
     */
    failureCode?: PayoutV2ResponseFailureCodeEnum;
    /**
     * 
     * @type {Date}
     * @memberof PayoutV2Response
     */
    estimatedArrivalTime?: Date;
}


/**
 * @export
 */
export const PayoutV2ResponseStatusEnum = {
    Succeeded: 'SUCCEEDED',
    Failed: 'FAILED',
    Accepted: 'ACCEPTED',
    Requested: 'REQUESTED',
    Locked: 'LOCKED',
    Expired: 'EXPIRED',
    Cancelled: 'CANCELLED',
    Reversed: 'REVERSED'
} as const;
export type PayoutV2ResponseStatusEnum = typeof PayoutV2ResponseStatusEnum[keyof typeof PayoutV2ResponseStatusEnum];

/**
 * @export
 */
export const PayoutV2ResponseFailureCodeEnum = {
    InsufficientBalance: 'INSUFFICIENT_BALANCE',
    RejectedByChannel: 'REJECTED_BY_CHANNEL',
    TemporaryTransferError: 'TEMPORARY_TRANSFER_ERROR',
    InvalidDestination: 'INVALID_DESTINATION',
    TransferError: 'TRANSFER_ERROR'
} as const;
export type PayoutV2ResponseFailureCodeEnum = typeof PayoutV2ResponseFailureCodeEnum[keyof typeof PayoutV2ResponseFailureCodeEnum];


/**
 * Check if a given object implements the PayoutV2Response interface.
 */
export function instanceOfPayoutV2Response(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "referenceId" in value;
    isInstance = isInstance && "channelCode" in value;
    isInstance = isInstance && "channelProperties" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;
    isInstance = isInstance && "businessId" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function PayoutV2ResponseFromJSON(json: any): PayoutV2Response {
    return PayoutV2ResponseFromJSONTyped(json, false);
}

export function PayoutV2ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayoutV2Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'referenceId': json['reference_id'],
        'channelCode': json['channel_code'],
        'channelProperties': ChannelPropertiesRequestFromJSON(json['channel_properties']),
        'amount': json['amount'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'currency': json['currency'],
        'receiptNotification': !exists(json, 'receipt_notification') ? undefined : ReceiptNotificationFromJSON(json['receipt_notification']),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'id': json['id'],
        'created': (new Date(json['created'])),
        'updated': (new Date(json['updated'])),
        'businessId': json['business_id'],
        'status': json['status'],
        'failureCode': !exists(json, 'failure_code') ? undefined : json['failure_code'],
        'estimatedArrivalTime': !exists(json, 'estimated_arrival_time') ? undefined : (new Date(json['estimated_arrival_time'])),
    };
}

export function PayoutV2ResponseToJSON(value?: PayoutV2Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reference_id': value.referenceId,
        'channel_code': value.channelCode,
        'channel_properties': ChannelPropertiesRequestToJSON(value.channelProperties),
        'amount': value.amount,
        'description': value.description,
        'currency': value.currency,
        'receipt_notification': ReceiptNotificationToJSON(value.receiptNotification),
        'metadata': value.metadata,
        'id': value.id,
        'created': (value.created.toISOString()),
        'updated': (value.updated.toISOString()),
        'business_id': value.businessId,
        'status': value.status,
        'failure_code': value.failureCode,
        'estimated_arrival_time': value.estimatedArrivalTime === undefined ? undefined : (value.estimatedArrivalTime.toISOString()),
    };
}

