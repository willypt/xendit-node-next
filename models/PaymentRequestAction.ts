/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
/**
 * 
 * @export
 * @interface PaymentRequestAction
 */
export interface PaymentRequestAction {
    /**
     * 
     * @type {string}
     * @memberof PaymentRequestAction
     */
    action: PaymentRequestActionActionEnum;
    /**
     * 
     * @type {string}
     * @memberof PaymentRequestAction
     */
    urlType: PaymentRequestActionUrlTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PaymentRequestAction
     */
    method: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentRequestAction
     */
    url: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentRequestAction
     */
    qrCode: string | null;
}


/**
 * @export
 */
export const PaymentRequestActionActionEnum = {
    Auth: 'AUTH',
    ResendAuth: 'RESEND_AUTH',
    Capture: 'CAPTURE',
    Cancel: 'CANCEL',
    PresentToCustomer: 'PRESENT_TO_CUSTOMER'
} as const;
export type PaymentRequestActionActionEnum = typeof PaymentRequestActionActionEnum[keyof typeof PaymentRequestActionActionEnum];

/**
 * @export
 */
export const PaymentRequestActionUrlTypeEnum = {
    Api: 'API',
    Web: 'WEB',
    Mobile: 'MOBILE',
    Deeplink: 'DEEPLINK'
} as const;
export type PaymentRequestActionUrlTypeEnum = typeof PaymentRequestActionUrlTypeEnum[keyof typeof PaymentRequestActionUrlTypeEnum];


/**
 * Check if a given object implements the PaymentRequestAction interface.
 */
export function instanceOfPaymentRequestAction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "action" in value;
    isInstance = isInstance && "urlType" in value;
    isInstance = isInstance && "method" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "qrCode" in value;

    return isInstance;
}

export function PaymentRequestActionFromJSON(json: any): PaymentRequestAction {
    return PaymentRequestActionFromJSONTyped(json, false);
}

export function PaymentRequestActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentRequestAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': json['action'],
        'urlType': json['url_type'],
        'method': json['method'],
        'url': json['url'],
        'qrCode': json['qr_code'],
    };
}

export function PaymentRequestActionToJSON(value?: PaymentRequestAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'url_type': value.urlType,
        'method': value.method,
        'url': value.url,
        'qr_code': value.qrCode,
    };
}

